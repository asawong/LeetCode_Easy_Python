Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.


Solution:
解题思路：利用堆栈后入先出的数据结构特性来做，即如果碰到的是左括号，那么入栈，碰到的是右括号，出栈与之进行匹配。

代码(python):
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        mapping = {'}': '{', ']': '[', ')': '('}
        for i in xrange(len(s)):
            # 碰到的是左括号
            if s[i] not in mapping:
                # 入栈
                stack.append(s[i])
            # 碰到的是右括号    
            else:
                # 此时分两种情况：
                # 一、碰到了右括号，但是栈的长度为0，也就是堆栈中无左括号弹出，则肯定不匹配
                # 二、碰到了右括号，堆栈弹出栈顶左括号，但与右括号不匹配
                if len(stack) == 0 or mapping[s[i]] != stack.pop():
                    return False
        # 最后，当对所有括号全部进行处理后（即该入栈的入栈，该出栈的出栈）
        # 如果堆栈长度为0，那么表示所有括号完全匹配
        # 如果堆栈长度不为0，则表示不完全匹配（例如"()[]{"，前两个都会正确匹配，但是最后一个括号压入堆栈后，会因为
        # 碰不到右括号而无法从栈顶弹出）
        return True if len(stack) == 0 else False
