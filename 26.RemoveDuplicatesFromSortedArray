Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example:
Given nums = [1, 1, 2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
It doesn't matter what you leave beyond the new length.


Solution:
解题思路:

代码(python):
class Solution(object):
    """
    :type nums: List[int]
    :rtype: int
    """
    # 如果nums为空列表，那么直接返回0
    if not nums:
        return 0
    
    # 因需要比较两个元素是否相等，所以设置两个索引i和newTail，i从1开始，newTail从0开始
    newTail = 0
    
    for i in xrange(1, len(nums)):
        # 若nums[i]不等于nums[newTail]，说明这两个列表元素并不重复，然后令newTail+=1，并令nums[newTail]等于nums[i]
        # 从而保证后续比较不会出错
        if nums[i] != nums[newTail]:
            newTail += 1
            nums[newTail] = nums[i]
    # 每有一个不重复的数字，newTail就自加1，又因为newTail从0开始，所以最后返回（newTail + 1）即为不重复列表的长度
    return newTail + 1
