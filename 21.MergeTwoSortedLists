Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together
the nodes of the first two lists.

Example:
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Solution:
解题思路：
Let's say

l1: 3->5->10->19->25->...
l2: 1->16->33->...

So we can compare a head of l1 and l2 then 1 is the lower one, so just create a new list and link 1 to it,
then proceed the cursor on l2.

l1: 3->5->10->19->25->...
l2: 16->33->...
result: 1

Next, compare 3 and 16 and do the same thing as the previous step.

l1: 5->10->19->25->...
l2: 16->33->...
result: 1->3

We can continue that process until either l1 or l2 becomes empty. After that, you may just link the rest
to the tail of result.

代码(python):
# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None
        
class Solution(object):
    """
    :type s: str
    :rtype: bool
    """
    s = t = ListNode(0)
    if (l1 == None and l2 == None):
        t.next = None
    elif (l1 == None):
        t.next = l2
    elif (l2 == None):
        t.next = l1
    else:
        while not (l1 is None or l2 is None):
            if l1.val < l2.val:
                t.next = l1
                l1 = l1.next
            else:
                t.next = l2
                l2 = l2.next
            t = t.next
        t.next = l1 or l2
    return s.next
                
